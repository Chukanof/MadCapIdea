{"version":3,"sources":["webpack:///./src/Login.tsx","webpack:///./src/Register.tsx","webpack:///./src/DriverRegistration.tsx","webpack:///./src/PassengerRegistration.tsx","webpack:///./src/index.tsx"],"names":[],"mappings":"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","file":"index.bundle.7c8ce94bcadf63a62908.js","sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\n\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\n\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport class Login extends React.Component<undefined, undefined> {\r\n  render() {\r\n    return (\r\n        <Well className=\"outer-well\">\r\n          <Form\r\n                // Supply callbacks to both valid and invalid\r\n                // submit attempts\r\n                validateAll={this._validateForm}\r\n                onInvalidSubmit={this._handleInvalidSubmit}\r\n                onValidSubmit={this._handleValidSubmit}>\r\n            <Grid>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                        <h4>ENTER YOUR LOGIN DETAILS</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                       <ValidatedInput type='text'\r\n                                              label='Email'\r\n                                              name='email'\r\n                                              errorHelp='Email address is invalid'/>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                         <ValidatedInput type='password'\r\n                                               name='password'\r\n                                               label='Password'\r\n                                               errorHelp='Password is invalid'/>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                        <ButtonInput\r\n                            id=\"loginBtn\"\r\n                            type='submit'\r\n                            bsSize='small'\r\n                            bsStyle='primary'\r\n                            value='Register'>Login</ButtonInput>\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n            </Form>\r\n        </Well>\r\n    )\r\n  }\r\n\r\n\r\n  _validateForm = (values) => {\r\n      let res = revalidator.validate(values, schema);\r\n\r\n      // If the values passed validation, we return true\r\n      if (res.valid) {\r\n          return true;\r\n      }\r\n\r\n      // Otherwise we should return an object containing errors\r\n      // e.g. { email: true, password: true }\r\n      return res.errors.reduce((errors, error) => {\r\n          // Set each property to either true or\r\n          // a string error description\r\n          errors[error.property] = true;\r\n\r\n          return errors;\r\n      }, {});\r\n  }\r\n\r\n  _handleInvalidSubmit = (errors, values) => {\r\n      // Errors is an array containing input names\r\n      // that failed to validate\r\n      alert(\"Form has errors and may not be submitted\");\r\n  }\r\n\r\n  _handleValidSubmit = (values) => {\r\n      // Values is an object containing all values\r\n      // from the inputs\r\n      console.log(\"Form may be submitted\");\r\n      console.log(values);\r\n  }\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Login.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { PassengerRegistration } from \"./PassengerRegistration\";\r\nimport { DriverRegistration } from \"./DriverRegistration\";\r\n\r\n\r\nexport interface RegisterState {\r\n    option: any;\r\n}\r\n\r\n\r\nexport class Register extends React.Component<any, RegisterState> {\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = { option: \"passenger\" };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>PLEASE ENTER YOUR REGISTRATION DETAILS</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h5>Choose your registration type</h5>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ButtonGroup>\r\n                                <Button bsSize='small' onClick={this._onOptionChange.bind(this, 'passenger')} active={this.state.option === 'passenger'}>Passenger</Button>\r\n                                <Button bsSize='small' onClick={this._onOptionChange.bind(this, 'driver')} active={this.state.option === 'driver'}>Driver</Button>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            {this.state.option === 'passenger' ?\r\n                               <div><PassengerRegistration/></div> :\r\n                               <div><DriverRegistration/></div>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        )\r\n    }\r\n\r\n    _onOptionChange(option) {\r\n        this.setState({\r\n            option: option\r\n        });\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Register.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\n\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\n\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport class DriverRegistration extends React.Component<undefined, undefined> {\r\n  render() {\r\n    return (\r\n      <Form className=\"submittable-form-inner\"\r\n                // Supply callbacks to both valid and invalid\r\n                // submit attempts\r\n                validateAll={this._validateForm}\r\n                onInvalidSubmit={this._handleInvalidSubmit}\r\n                onValidSubmit={this._handleValidSubmit}>\r\n            <Grid>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                        <h4>Driver details</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                       <ValidatedInput type='text'\r\n                                              label='Email'\r\n                                              name='email'\r\n                                              errorHelp='Email address is invalid'/>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                         <ValidatedInput type='password'\r\n                                               name='password'\r\n                                               label='Password'\r\n                                               errorHelp='Password is invalid'/>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                        <ButtonInput\r\n                            id=\"registerBtn\"\r\n                            type='submit'\r\n                            bsSize='small'\r\n                            bsStyle='primary'\r\n                            value='Register'>Register</ButtonInput>\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n        </Form>\r\n    )\r\n  }\r\n\r\n\r\n   _validateForm = (values) => {\r\n       let res = revalidator.validate(values, schema);\r\n\r\n       // If the values passed validation, we return true\r\n       if (res.valid) {\r\n           return true;\r\n       }\r\n\r\n       // Otherwise we should return an object containing errors\r\n       // e.g. { email: true, password: true }\r\n       return res.errors.reduce((errors, error) => {\r\n           // Set each property to either true or\r\n           // a string error description\r\n           errors[error.property] = true;\r\n\r\n           return errors;\r\n       }, {});\r\n   }\r\n\r\n   _handleInvalidSubmit = (errors, values) => {\r\n       // Errors is an array containing input names\r\n       // that failed to validate\r\n       alert(\"Form has errors and may not be submitted\");\r\n   }\r\n\r\n   _handleValidSubmit = (values) => {\r\n       // Values is an object containing all values\r\n       // from the inputs\r\n       console.log(\"Form may be submitted\");\r\n       console.log(values);\r\n   }\r\n\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/DriverRegistration.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\n\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\n\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        fullname: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 12,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport class PassengerRegistration extends React.Component<undefined, undefined> {\r\n  render() {\r\n    return (\r\n      <Form className=\"submittable-form-inner\"\r\n                // Supply callbacks to both valid and invalid\r\n                // submit attempts\r\n                validateAll={this._validateForm}\r\n                onInvalidSubmit={this._handleInvalidSubmit}\r\n                onValidSubmit={this._handleValidSubmit}>\r\n            <Grid>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                        <h4>Passenger details</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                       <ValidatedInput type='text'\r\n                          label='FullName'\r\n                          name='fullname'\r\n                          errorHelp='FullName is invalid'/>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                       <ValidatedInput type='text'\r\n                          label='Email'\r\n                          name='email'\r\n                          errorHelp='Email address is invalid'/>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                        <ValidatedInput type='password'\r\n                           label='Password'\r\n                           name='password'\r\n                           errorHelp='Password is invalid'/>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={10} md={6}>\r\n                        <ButtonInput\r\n                            id=\"registerBtn\"\r\n                            type='submit'\r\n                            bsSize='small'\r\n                            bsStyle='primary'\r\n                            value='Register'>Register</ButtonInput>\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n        </Form>\r\n    )\r\n  }\r\n\r\n  _validateForm = (values) => {\r\n      let res = revalidator.validate(values, schema);\r\n\r\n      // If the values passed validation, we return true\r\n      if (res.valid) {\r\n          return true;\r\n      }\r\n\r\n      // Otherwise we should return an object containing errors\r\n      // e.g. { email: true, password: true }\r\n      return res.errors.reduce((errors, error) => {\r\n          // Set each property to either true or\r\n          // a string error description\r\n          errors[error.property] = true;\r\n\r\n          return errors;\r\n      }, {});\r\n  }\r\n\r\n  _handleInvalidSubmit = (errors, values) => {\r\n      // Errors is an array containing input names\r\n      // that failed to validate\r\n      alert(\"Form has errors and may not be submitted\");\r\n  }\r\n\r\n  _handleValidSubmit = (values) => {\r\n      // Values is an object containing all values\r\n      // from the inputs\r\n      console.log(\"Form may be submitted\");\r\n      console.log(values);\r\n  }\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/PassengerRegistration.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Nav, Navbar, NavItem, NavDropdown, MenuItem, Button} from \"react-bootstrap\";\r\n\r\nimport { Router, Route, hashHistory  } from 'react-router'\r\n\r\nimport { Login } from \"./Login\";\r\nimport { Register } from \"./Register\";\r\n\r\n\r\nclass MainNav extends React.Component<undefined, undefined> {\r\n  render() {\r\n    return (\r\n     <Navbar>\r\n         <Nav>\r\n             <NavItem eventKey={1} href='#/'>Login</NavItem>\r\n             <NavItem eventKey={2} href='#/register'>Register</NavItem>\r\n             <NavItem eventKey={2} href='#/about'>About</NavItem>\r\n             <NavItem eventKey={2} href='#/redirecter'>Redirect</NavItem>\r\n         </Nav>\r\n     </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nclass App extends React.Component<undefined, undefined> {\r\n  render() {\r\n    return (\r\n\r\n        <div>\r\n            <MainNav/>\r\n            {this.props.children}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass ReDirecter extends React.Component<undefined, undefined> {\r\n\r\n    handleClick = () => {\r\n        hashHistory.push('/');\r\n    };\r\n\r\n    render() {\r\n        return (\r\n          <Button bsStyle=\"primary\" bsSize=\"large\" onClick={this.handleClick}>Go to Login</Button>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst About = () => (\r\n  <div>\r\n    <h2>About</h2>\r\n  </div>\r\n)\r\n\r\n\r\n\r\nReactDOM.render((\r\n    <Router history={hashHistory}>\r\n            <Route component={App}>\r\n                <Route path=\"/\" component={Login}/>\r\n                <Route path=\"/register\" component={Register}/>\r\n                <Route path=\"/about\" component={About}/>\r\n                <Route path=\"/redirecter\" component={ReDirecter}/>\r\n            </Route>\r\n        </Router>\r\n), document.getElementById('root'));\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx"],"sourceRoot":""}
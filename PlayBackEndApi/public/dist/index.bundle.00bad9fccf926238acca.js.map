{"version":3,"sources":["webpack:///webpack:///./src/CreateJob.tsx","webpack:///webpack:///./src/Login.tsx","webpack:///webpack:///./src/Register.tsx","webpack:///webpack:///./src/ViewJob.tsx","webpack:///webpack:///./src/DriverRegistration.tsx","webpack:///webpack:///./src/PassengerRegistration.tsx","webpack:///webpack:///./src/index.tsx"],"names":[],"mappings":"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","file":"index.bundle.00bad9fccf926238acca.js","sourcesContent":["import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { withGoogleMap, GoogleMap, Marker, InfoBox } from \"react-google-maps\";\r\n\r\nconst CreateJobGoogleMap = withGoogleMap(props => (\r\n    <GoogleMap\r\n        ref={props.onMapLoad}\r\n        defaultZoom={16}\r\n        defaultCenter={{ lat: 50.8202949, lng: -0.1406958 }}\r\n        onClick={props.onMapClick}>\r\n        <Marker\r\n            position={props.currentPosition}\r\n            icon='/assets/images/passenger.png'>\r\n        </Marker>\r\n    </GoogleMap>\r\n));\r\n\r\n\r\nexport interface CreateJobState {\r\n    currentPosition: any;\r\n}\r\n\r\nexport class CreateJob extends React.Component<undefined, CreateJobState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            currentPosition: { lat: 50.8202949, lng: -0.1406958 }\r\n          };\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>SET YOUR CURRENT LOCATION</h4>\r\n                            <h6>Click the map to set your current location</h6>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <CreateJobGoogleMap\r\n                                containerElement={\r\n                                    <div style={{\r\n                                        position: 'relative',\r\n                                        top: 0,\r\n                                        left: 0,\r\n                                        right: 0,\r\n                                        bottom: 0,\r\n                                        width: 600,\r\n                                        height: 600,\r\n                                        justifyContent: 'flex-end',\r\n                                        alignItems: 'center',\r\n                                        marginTop: 20,\r\n                                        marginLeft: 0,\r\n                                        marginRight: 0,\r\n                                        marginBottom: 20\r\n                                    }} />\r\n                                }\r\n                                mapElement={\r\n                                    <div style={{\r\n                                        position: 'relative',\r\n                                        top: 0,\r\n                                        left: 0,\r\n                                        right: 0,\r\n                                        bottom: 0,\r\n                                        width: 600,\r\n                                        height: 600,\r\n                                        marginTop: 20,\r\n                                        marginLeft: 0,\r\n                                        marginRight: 0,\r\n                                        marginBottom: 20\r\n                                    }} />\r\n                                }\r\n                                onMapLoad={this._handleMapLoad}\r\n                                onMapClick={this._handleMapClick}\r\n                                currentPosition={this.state.currentPosition}\r\n                                />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <ButtonInput\r\n                            id=\"createJobBtn\"\r\n                            type='submit'\r\n                            bsSize='small'\r\n                            bsStyle='primary'\r\n                            value='Register'>Create Job</ButtonInput>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        );\r\n    }\r\n\r\n    _handleMapLoad = (map) => {\r\n        if (map) {\r\n            console.log(map.getZoom());\r\n        }\r\n    }\r\n\r\n    _handleMapClick = (event) => {\r\n        this.setState({\r\n            currentPosition: event.latLng\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/CreateJob.tsx\n\n\n// WEBPACK FOOTER //\n// webpack:///./src/CreateJob.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\n\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\n\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport class Login extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Form\r\n                    // Supply callbacks to both valid and invalid\r\n                    // submit attempts\r\n                    validateAll={this._validateForm}\r\n                    onInvalidSubmit={this._handleInvalidSubmit}\r\n                    onValidSubmit={this._handleValidSubmit}>\r\n                    <Grid>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <h4>ENTER YOUR LOGIN DETAILS</h4>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <ValidatedInput type='text'\r\n                                    label='Email'\r\n                                    name='email'\r\n                                    errorHelp='Email address is invalid'/>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <ValidatedInput type='password'\r\n                                    name='password'\r\n                                    label='Password'\r\n                                    errorHelp='Password is invalid'/>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <ButtonInput\r\n                                    id=\"loginBtn\"\r\n                                    type='submit'\r\n                                    bsSize='small'\r\n                                    bsStyle='primary'\r\n                                    value='Register'>Login</ButtonInput>\r\n                            </Col>\r\n                        </Row>\r\n                    </Grid>\r\n                </Form>\r\n            </Well>\r\n        )\r\n    }\r\n\r\n\r\n    _validateForm = (values) => {\r\n        let res = revalidator.validate(values, schema);\r\n\r\n        // If the values passed validation, we return true\r\n        if (res.valid) {\r\n            return true;\r\n        }\r\n\r\n        // Otherwise we should return an object containing errors\r\n        // e.g. { email: true, password: true }\r\n        return res.errors.reduce((errors, error) => {\r\n            // Set each property to either true or\r\n            // a string error description\r\n            errors[error.property] = true;\r\n\r\n            return errors;\r\n        }, {});\r\n    }\r\n\r\n    _handleInvalidSubmit = (errors, values) => {\r\n        // Errors is an array containing input names\r\n        // that failed to validate\r\n        alert(\"Form has errors and may not be submitted\");\r\n    }\r\n\r\n    _handleValidSubmit = (values) => {\r\n        // Values is an object containing all values\r\n        // from the inputs\r\n        console.log(\"Form may be submitted\");\r\n        console.log(values);\r\n    }\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Login.tsx\n\n\n// WEBPACK FOOTER //\n// webpack:///./src/Login.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { PassengerRegistration } from \"./PassengerRegistration\";\r\nimport { DriverRegistration } from \"./DriverRegistration\";\r\n\r\n\r\nexport interface RegisterState {\r\n    option: string;\r\n}\r\n\r\n\r\nexport class Register extends React.Component<any, RegisterState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { option: \"passenger\" };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>PLEASE ENTER YOUR REGISTRATION DETAILS</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h5>Choose your registration type </h5>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ButtonGroup>\r\n                                <Button bsSize='small' onClick={this._onOptionChange.bind(this, 'passenger') } active={this.state.option === 'passenger'}>Passenger</Button>\r\n                                <Button bsSize='small' onClick={this._onOptionChange.bind(this, 'driver') } active={this.state.option === 'driver'}>Driver</Button>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            {this.state.option === 'passenger' ?\r\n                                <div><PassengerRegistration/></div> :\r\n                                <div><DriverRegistration/></div>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        )\r\n    }\r\n\r\n    _onOptionChange(option) {\r\n        this.setState({\r\n            option: option\r\n        });\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Register.tsx\n\n\n// WEBPACK FOOTER //\n// webpack:///./src/Register.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { withGoogleMap, GoogleMap, Marker, OverlayView } from \"react-google-maps\";\r\n\r\nconst STYLES = {\r\n    overlayView: {\r\n        background: `white`,\r\n        border: `1px solid #ccc`,\r\n        padding: 15,\r\n    }\r\n}\r\n\r\n\r\nconst GetPixelPositionOffset = (width, height) => {\r\n    return { x: -(width / 2), y: -(height / 2) };\r\n}\r\n\r\n\r\n\r\nconst ViewJobGoogleMap = withGoogleMap(props => (\r\n    <GoogleMap\r\n        ref={props.onMapLoad}\r\n        defaultZoom={14}\r\n        defaultCenter={{ lat: 50.8202949, lng: -0.1406958 }}>\r\n\r\n\r\n        {props.markers.map((marker, index) => (\r\n            <OverlayView\r\n                key={marker.key}\r\n                mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\r\n                position={marker.position}\r\n                getPixelPositionOffset={GetPixelPositionOffset}>\r\n                <div style={STYLES.overlayView}>\r\n                    <img src={marker.icon} />\r\n                    <strong>{marker.key}</strong>\r\n                    <br/>\r\n                    <Button\r\n                        type='button'\r\n                        bsSize='small'\r\n                        bsStyle='primary'\r\n                        onClick={() => props.onMarkerClick(marker) }\r\n                        value='Accept'>Accept</Button>\r\n                </div>\r\n            </OverlayView>\r\n        )) }\r\n    </GoogleMap>\r\n));\r\n\r\n\r\n\r\n\r\n\r\n//TODO : make this correct\r\n//see https://tomchentw.github.io/react-google-maps/\r\n//\r\n//state = {\r\n//    overlays: [{\r\n//      position: {\r\n//        lat: 25.0112183,\r\n//        lng: 121.52067570000001,\r\n//      }\r\n//    }],\r\n//  };\r\n\r\nexport interface ViewJobState {\r\n    markers: any;\r\n}\r\n\r\nexport class ViewJob extends React.Component<undefined, ViewJobState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            markers: [{\r\n                    position: {\r\n                        lat: 50.8202949,\r\n                        lng: -0.1406958\r\n                    },\r\n                    key: 'driver_1',\r\n                    icon: '/assets/images/driver.png'\r\n                },\r\n                {\r\n                    position: {\r\n                        lat: 50.8128187,\r\n                        lng: -0.1361418\r\n                    },\r\n                    key: 'driver_2',\r\n                    icon: '/assets/images/driver.png'\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>CURRENT JOB</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ViewJobGoogleMap\r\n                                containerElement={\r\n                                    <div style={{\r\n                                        position: 'relative',\r\n                                        top: 0,\r\n                                        left: 0,\r\n                                        right: 0,\r\n                                        bottom: 0,\r\n                                        width: 600,\r\n                                        height: 600,\r\n                                        justifyContent: 'flex-end',\r\n                                        alignItems: 'center',\r\n                                        marginTop: 20,\r\n                                        marginLeft: 0,\r\n                                        marginRight: 0,\r\n                                        marginBottom: 20\r\n                                    }} />\r\n                                }\r\n                                mapElement={\r\n                                    <div style={{\r\n                                        position: 'relative',\r\n                                        top: 0,\r\n                                        left: 0,\r\n                                        right: 0,\r\n                                        bottom: 0,\r\n                                        width: 600,\r\n                                        height: 600,\r\n                                        marginTop: 20,\r\n                                        marginLeft: 0,\r\n                                        marginRight: 0,\r\n                                        marginBottom: 20\r\n                                    }} />\r\n                                }\r\n                                markers={this.state.markers}\r\n                                onMarkerClick={this._handleClick}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <span>\r\n                            <Button\r\n                                id=\"viewJobCompleteBtn\"\r\n                                type='button'\r\n                                bsSize='small'\r\n                                bsStyle='primary'\r\n                                value='Complete'>Complete Job</Button>\r\n                            <Button\r\n                                id=\"viewJobCancelBtn\"\r\n                                type='button'\r\n                                bsSize='small'\r\n                                bsStyle='primary'\r\n                                value='Cancel'>Cancel Job</Button>\r\n                        </span>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    _handleClick = (targetMarker) => {\r\n        console.log('button on overlay clicked:' + targetMarker.key);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ViewJob.tsx\n\n\n// WEBPACK FOOTER //\n// webpack:///./src/ViewJob.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\n\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\n\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        fullname: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 12,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        vehicleDescription: {\r\n            type: 'string',\r\n            minLength: 6,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        vehicleRegistrationNumber: {\r\n            type: 'string',\r\n            minLength: 6,\r\n            maxLength: 30,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport class DriverRegistration extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (\r\n            <Form className=\"submittable-form-inner\"\r\n                // Supply callbacks to both valid and invalid\r\n                // submit attempts\r\n                validateAll={this._validateForm}\r\n                onInvalidSubmit={this._handleInvalidSubmit}\r\n                onValidSubmit={this._handleValidSubmit}>\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>Driver details</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='FullName'\r\n                                name='fullname'\r\n                                errorHelp='FullName is invalid'/>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Email'\r\n                                name='email'\r\n                                errorHelp='Email address is invalid'/>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='password'\r\n                                name='password'\r\n                                label='Password'\r\n                                errorHelp='Password is invalid'/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>Vehicle details</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Vehicle Description'\r\n                                name='vehicleDescription'\r\n                                errorHelp='Vehicle description is invalid'/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Vehicle Registration Number'\r\n                                name='vehicleRegistrationNumber'\r\n                                errorHelp='Vehicle registration number is invalid'/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ButtonInput\r\n                                id=\"registerBtn\"\r\n                                type='submit'\r\n                                bsSize='small'\r\n                                bsStyle='primary'\r\n                                value='Register'>Register</ButtonInput>\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n\r\n    _validateForm = (values) => {\r\n        let res = revalidator.validate(values, schema);\r\n\r\n        // If the values passed validation, we return true\r\n        if (res.valid) {\r\n            return true;\r\n        }\r\n\r\n        // Otherwise we should return an object containing errors\r\n        // e.g. { email: true, password: true }\r\n        return res.errors.reduce((errors, error) => {\r\n            // Set each property to either true or\r\n            // a string error description\r\n            errors[error.property] = true;\r\n\r\n            return errors;\r\n        }, {});\r\n    }\r\n\r\n    _handleInvalidSubmit = (errors, values) => {\r\n        // Errors is an array containing input names\r\n        // that failed to validate\r\n        alert(\"Form has errors and may not be submitted\");\r\n    }\r\n\r\n    _handleValidSubmit = (values) => {\r\n        // Values is an object containing all values\r\n        // from the inputs\r\n        console.log(\"Form may be submitted\");\r\n        console.log(values);\r\n    }\r\n\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/DriverRegistration.tsx\n\n\n// WEBPACK FOOTER //\n// webpack:///./src/DriverRegistration.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\n\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\n\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        fullname: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 12,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport class PassengerRegistration extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (\r\n            <Form className=\"submittable-form-inner\"\r\n                // Supply callbacks to both valid and invalid\r\n                // submit attempts\r\n                validateAll={this._validateForm}\r\n                onInvalidSubmit={this._handleInvalidSubmit}\r\n                onValidSubmit={this._handleValidSubmit}>\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>Passenger details</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='FullName'\r\n                                name='fullname'\r\n                                errorHelp='FullName is invalid'/>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Email'\r\n                                name='email'\r\n                                errorHelp='Email address is invalid'/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='password'\r\n                                label='Password'\r\n                                name='password'\r\n                                errorHelp='Password is invalid'/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ButtonInput\r\n                                id=\"registerBtn\"\r\n                                type='submit'\r\n                                bsSize='small'\r\n                                bsStyle='primary'\r\n                                value='Register'>Register</ButtonInput>\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n    _validateForm = (values) => {\r\n        let res = revalidator.validate(values, schema);\r\n\r\n        // If the values passed validation, we return true\r\n        if (res.valid) {\r\n            return true;\r\n        }\r\n\r\n        // Otherwise we should return an object containing errors\r\n        // e.g. { email: true, password: true }\r\n        return res.errors.reduce((errors, error) => {\r\n            // Set each property to either true or\r\n            // a string error description\r\n            errors[error.property] = true;\r\n\r\n            return errors;\r\n        }, {});\r\n    }\r\n\r\n    _handleInvalidSubmit = (errors, values) => {\r\n        // Errors is an array containing input names\r\n        // that failed to validate\r\n        alert(\"Form has errors and may not be submitted\");\r\n    }\r\n\r\n    _handleValidSubmit = (values) => {\r\n        // Values is an object containing all values\r\n        // from the inputs\r\n        console.log(\"Form may be submitted\");\r\n        console.log(values);\r\n    }\r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/PassengerRegistration.tsx\n\n\n// WEBPACK FOOTER //\n// webpack:///./src/PassengerRegistration.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Nav, Navbar, NavItem, NavDropdown, MenuItem, Button} from \"react-bootstrap\";\r\n\r\nimport { Router, Route, hashHistory  } from 'react-router'\r\n\r\nimport { Login } from \"./Login\";\r\nimport { Register } from \"./Register\";\r\nimport { CreateJob } from \"./CreateJob\";\r\nimport { ViewJob } from \"./ViewJob\";\r\n\r\n\r\nclass MainNav extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (\r\n            <Navbar>\r\n                <Nav>\r\n                    <NavItem eventKey={1} href='#/'>Login</NavItem>\r\n                    <NavItem eventKey={2} href='#/register'>Register</NavItem>\r\n                    <NavItem eventKey={2} href='#/createjob'>CreateJob</NavItem>\r\n                    <NavItem eventKey={2} href='#/viewJob'>ViewJob</NavItem>\r\n                    <NavItem eventKey={2} href='#/redirecter'>Redirect</NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nclass App extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <MainNav/>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass ReDirecter extends React.Component<undefined, undefined> {\r\n\r\n    handleClick = () => {\r\n        hashHistory.push('/');\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Button bsStyle=\"primary\" bsSize=\"large\" onClick={this.handleClick}>Go to Login</Button>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst About = () => (\r\n    <div>\r\n        <h2>About</h2>\r\n    </div>\r\n)\r\n\r\n\r\n\r\nReactDOM.render((\r\n    <Router history={hashHistory}>\r\n        <Route component={App}>\r\n            <Route path=\"/\" component={Login}/>\r\n            <Route path=\"/register\" component={Register}/>\r\n            <Route path=\"/createjob\" component={CreateJob}/>\r\n            <Route path=\"/viewjob\" component={ViewJob}/>\r\n            <Route path=\"/redirecter\" component={ReDirecter}/>\r\n        </Route>\r\n    </Router>\r\n), document.getElementById('root'));\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx\n\n\n// WEBPACK FOOTER //\n// webpack:///./src/index.tsx"],"sourceRoot":""}